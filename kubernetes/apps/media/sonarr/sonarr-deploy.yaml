apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sonarr
  namespace: media
spec:
  serviceName: sonarr
  replicas: 1
  selector:
    matchLabels:
      app: sonarr
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      automountServiceAccountToken: false
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
      volumes:
        - name: sonarr-volume
          persistentVolumeClaim:
            claimName: sonarr-volume-pvc
        - name: downloads-volume
          persistentVolumeClaim:
            claimName: sonarr-downloads-pvc
        - name: tvshows-volume
          persistentVolumeClaim:
            claimName: sonarr-tvshows-pvc
        - name: tmpvol
          emptyDir:
            medium: Memory
            sizeLimit: 64Mi
      containers:
        - name: sonarr
          image: ghcr.io/onedr0p/sonarr:4.0.6@sha256:295b17e05345406a7b34966b3911ef835648e02f64838aaf158ff351d2170d5b
          ports:
            - containerPort: 8989
          env:
            - name: SONARR__AUTHENTICATION_METHOD
              value: External
            - name: SONARR__ANALYTICS_ENABLED
              value: "False"
            - name: SONARR__URL_BASE
              value: /sonarr
          volumeMounts:
            - name: sonarr-volume
              mountPath: /config
            - name: downloads-volume
              mountPath: /media/downloads
            - name: tvshows-volume
              mountPath: /media/tvshows
            - name: tmpvol
              mountPath: /tmp # Resolve error when using ReadOnly FS: "Failed to create CoreCLR, HRESULT: 0x80004005" - https://github.com/Azure/azure-functions-host/issues/8181 && https://github.com/dotnet/runtime/issues/3168
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
---
apiVersion: v1
kind: Service
metadata:
  name: sonarr
  namespace: media
spec:
  ports:
    - port: 8989
      protocol: TCP
      targetPort: 8989
  selector:
    app: sonarr
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-issuer
  name: sonarr-ingress
  namespace: media
spec:
  ingressClassName: nginx-external
  rules:
    - host: media.${DOMAIN_NAME}
      http:
        paths:
          - path: /sonarr
            pathType: Prefix
            backend:
              service:
                name: sonarr
                port:
                  number: 8989
