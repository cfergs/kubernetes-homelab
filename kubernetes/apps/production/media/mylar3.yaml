apiVersion: v1
kind: ConfigMap
metadata:
  name: init-mylar3-cm
  namespace: media
data:
  99-mylar3-init.sh: |
    #!/usr/bin/with-contenv bash

    # fix for error when updating settings in web interface
    #if [ ! -d ${CONFIG_DIR}/app/.ComicTagger ]; then
    #  mkdir ${CONFIG_DIR}/app/.ComicTagger
    #  chown hotio:hotio "${CONFIG_DIR}/app/.ComicTagger"
    #  echo "creating missing .ComicTagger folder"
    #fi

    echo "installing sed"
    apk add --no-cache sed

    FILE=${CONFIG_FILE}

    if [ ! ${BASE_URL} ]; then
      URL=/comics
    else
      URL=${BASE_URL}
    fi

    if [ ! -f "$FILE" ]; then
        echo "no config file exists - you must be doing a fresh install"
        echo "a config file will be created for you by the container. Restart container to update values"
    fi

    if [ -f "$FILE" ]; then
      sed -i '/http_root = \/$/,${s||http_root = '"$URL"'|;b};$q1' $FILE
        if [ $? -eq 0 ]; then
          echo "updated baseurl to $URL"
        fi

      if [ ${COMICVINE_API_KEY_FILE} ]; then
        COMICVINE_APIKEY=$(cat $COMICVINE_API_KEY_FILE)
        sed -i '/comicvine_api = None$/,${s||comicvine_api = '"${COMICVINE_APIKEY}"'|;b};$q1' $FILE
        if [ $? -eq 0 ]; then
          echo "updated comicvine api key"
        fi
      fi

      if [ ${COMIC_DIR} ]; then
        sed -i '/destination_dir = None$/,${s||comic_dir = '"${COMIC_DIR}"'|;b};$q1' $FILE
        if [ $? -eq 0 ]; then
          echo "updated destination_dir to ${COMIC_DIR}"
        fi
      fi

    fi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mylar3
  namespace: media
  labels:
    app: mylar3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mylar3
  template:
    metadata:
      labels:
        app: mylar3
    spec:
      volumes:
      - name: config-volume
        persistentVolumeClaim:
          claimName: config-file-pvc
      - name: scripts
        configMap:
          name: init-mylar3-cm
          items:
          - key: 99-mylar3-init.sh
            path: 99-mylar3-init.sh
      containers:
      - name: mylar3
        image: hotio/mylar3
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", 'cp /scripts/* /etc/cont-init.d/']
        ports:
        - containerPort: 8090
        env:
        - name: TZ
          value: Australia/Perth
        - name: CONFIG_FILE
          value: /config/config.ini
        volumeMounts:
        - name: config-volume
          mountPath: /config
          subPath: configs/mylar3
        - name: scripts
          mountPath: /scripts
        startupProbe:
          exec:
            command:
              - /bin/sh
              - -c
              - grep 'http_root = /comics' /config/config.ini
          failureThreshold: 10
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /comics
            port: 8090
          initialDelaySeconds: 60
          periodSeconds: 60
---
apiVersion: v1
kind: Service
metadata:
  name: mylar3
  namespace: media
  labels:
    app: mylar3
spec:
  ports:
  - port: 8090
    protocol: TCP
    targetPort: 8090
  selector:
    app: mylar3
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mylar3-ingress
  namespace: media
spec:
  ingressClassName: nginx
  rules:
  - host: media.${DOMAIN_NAME}
    http:
      paths:
      - path: /comics
        pathType: Prefix
        backend:
          service:
            name: mylar3
            port:
              number: 8090
